#pragma once


/////////////////////////////////////////////////////////////////////////////
//	定数定義
/////////////////////////////////////////////////////////////////////////////
//---------------------------------------------------------------------------
//	ファイルオープン(OpenDialog)／保存ダイアログの表示(SaveDialog)用
//	フィルタ文字列定義
#define	CMN_FILE_FILTER_TXT	_T("txtファイル|*.txt|全てのファイル|*.*||")	//	テキストファイル
#define	CMN_FILE_FILTER_DAT	_T("datファイル|*.dat|全てのファイル|*.*||")	//	datファイル

//	拡張子文字列定義
#define	CMN_FILE_EXT_TXT	_T("txt")		//	テキストファイル
#define	CMN_FILE_EXT_DAT	_T("dat")		//	datファイル
//---------------------------------------------------------------------------
//	フォルダ選択ダイアログの表示(SelectFolder)用
//	タイトル文字列
#define	CMN_FILE_TITLE_DIR	_T("フォルダを選択してください。")
//---------------------------------------------------------------------------
//	ファイル検索(FindFile)用
//	タイトル文字列
#define	CMN_FILE_FIND_MODE_FILE	(0)			//	ファイルのみ検索
#define	CMN_FILE_FIND_MODE_DIR	(1)			//	ディレクトリのみ検索
#define	CMN_FILE_FIND_MODE_BOTH	(2)			//	ファイル、ディレクトリ両方を検索
//---------------------------------------------------------------------------
//	ファイルシーク(Seek)用
//	開始点
#define	CMN_FILE_SEEK_BEGIN		(FILE_BEGIN)	//	ファイルの先頭
#define	CMN_FILE_SEEK_CURRENT	(FILE_CURRENT)	//	現在の位置
#define	CMN_FILE_SEEK_END		(FILE_END)		//	ファイルの終端
//---------------------------------------------------------------------------


class CCmnFile
{
public:
	CCmnFile(void);
	virtual ~CCmnFile(void);
	/////////////////////////////////////////////////////////////////////////////
	//	ファイル名(フルパス)からパスを取得
	//	入力：	CString			&dir;			ディレクトリ名の格納先
	//			LPCTSTR			fname;			ファイル名称
	//	出力：	TRUE			正常終了
	//			FALSE			異常終了
	/////////////////////////////////////////////////////////////////////////////
	static	BOOL FileNameToPathName(CString &dir, LPCTSTR fname);

	/////////////////////////////////////////////////////////////////////////////
	//	フルパスファイル名称の作成
	//	入力：	CString			&pathname;		ファイル名称(フルパス)の格納先
	//			LPCTSTR			dirname;		ディレクトリ名称
	//			LPCTSTR			fname;			ファイル名称
	//	出力：	TRUE			正常終了
	//			FALSE			異常終了
	/////////////////////////////////////////////////////////////////////////////
	static	BOOL MakeFileName(CString &pathname, LPCTSTR dirname, LPCTSTR fname);

	////////////////////////////////////////////////////////////////////////////
	//	ファイルの有無診断
	//	入力：	LPCTSTR			fname;		ファイル名称
	//	出力：	TRUE			存在する。
	//			FALSE			存在しない。
	////////////////////////////////////////////////////////////////////////////
	static	BOOL IsFileExist(LPCTSTR fname);

	////////////////////////////////////////////////////////////////////////////
	//	ファイルオープン(バイナリ読み書きモード)(MFC)
	//	入力：	CFile		*file;			CFileクラスへのポインタ
	//			LPCTSTR		fname;			ファイル名称
	//	出力：	FALSE		異常終了
	//			TRUE		正常終了
	////////////////////////////////////////////////////////////////////////////
	static	BOOL OpenBinaryRW(CFile *file, LPCTSTR fname);

	/////////////////////////////////////////////////////////////////////////////
	//	アプリケーションディレクトリ取得
	//	入力：	HINSTANCE		hInstance;		アプリケーションのインスタンスハンドル
	//			CString			path;			アプリケーションディレクトリの格納先
	//	出力：	TRUE			正常終了
	//			FALSE			異常終了
	/////////////////////////////////////////////////////////////////////////////
	static	BOOL GetApplPath(HINSTANCE hInstance, CString &path);

	////////////////////////////////////////////////////////////////////////////
	//	1行読み込み(MFC)
	//	入力：	CFile			*file;			ファイルクラスへのポインタ
	//			CString			&str;			読み込んだ文字列の格納先
	//	出力：	TRUE			正常終了
	//			FALSE			読み込みを行わなかった。
	////////////////////////////////////////////////////////////////////////////
	static	BOOL ReadString(CFile *file, CString &str);

	////////////////////////////////////////////////////////////////////////////
	//	ディレクトリの有無診断
	//	入力：	LPCTSTR			dirname;	ディレクトリ名称
	//	出力：	TRUE			存在する。
	//			FALSE			存在しない。
	////////////////////////////////////////////////////////////////////////////
	static	BOOL IsDirExist(LPCTSTR dirname);

	/////////////////////////////////////////////////////////////////////////////
	//	ディレクトリ作成
	//	入力：	LPCTSTR			dirname;		作成するディレクトリ名称
	//	出力：	FALSE			異常終了
	//			TRUE			正常終了
	/////////////////////////////////////////////////////////////////////////////
	static	BOOL MakeDirectory(LPCTSTR dirname);

	/////////////////////////////////////////////////////////////////////////////
	//	ディレクトリ削除
	//	入力：	LPCTSTR			dirname;		削除するディレクトリ名称
	//	出力：	FALSE			異常終了
	//			TRUE			正常終了
	/////////////////////////////////////////////////////////////////////////////
	static	BOOL DeleteDirectory(LPCTSTR dirname);

	////////////////////////////////////////////////////////////////////////////
	//	ファイルオープン(テキスト書き出しモード)(MFC)
	//	入力：	CFile		*file;			CFileクラスへのポインタ
	//			LPCTSTR		fname;			ファイル名称
	//	出力：	FALSE		異常終了
	//			TRUE		正常終了
	////////////////////////////////////////////////////////////////////////////
	static	BOOL OpenTextW(CFile *file, LPCTSTR fname);

	////////////////////////////////////////////////////////////////////////////
	//	ファイルオープン(バイナリ書き出しモード)(MFC)
	//	入力：	CFile		*file;			CFileクラスへのポインタ
	//			LPCTSTR		fname;			ファイル名称
	//	出力：	FALSE		異常終了
	//			TRUE		正常終了
	////////////////////////////////////////////////////////////////////////////
	static	BOOL OpenBinaryW(CFile *file, LPCTSTR fname);

	////////////////////////////////////////////////////////////////////////////
	//	ファイルシーク(MFC)
	//	入力：	CFile			*file;			ファイルハンドル
	//			LONGLONG		bytes;			移動するバイト数
	//			DWORD			offset;			開始位置(CMN_FILE_SEEK_xxx)
	//	出力：	TRUE			正常終了
	//			FALSE			異常終了
	////////////////////////////////////////////////////////////////////////////
#if	!defined(_MSC_VER) || (_MSC_VER < 1400)		//	for VC6		(VC6	_MSC_VER = 1200)
	static	BOOL Seek(CFile *file, LONG bytes, DWORD offset);
#else											//	for VC2005	(VC2005	_MSC_VER = 1400)
	static	BOOL Seek(CFile *file, LONGLONG bytes, DWORD offset);
#endif

	////////////////////////////////////////////////////////////////////////////
	//	ファイルクローズ(MFC)
	//	入力：	CFile			*file;			ファイルクラスへのポインタ
	//	出力：	なし
	////////////////////////////////////////////////////////////////////////////
	static	void CloseFile(CFile *file);

	////////////////////////////////////////////////////////////////////////////
	//	書式付き文字列書き込み(MFC)
	//	入力：	CFile			*file;			ファイルクラスへのポインタ
	//			LPCTSTR			format;			出力フォーマット
	//	出力：	TRUE			正常終了
	//			FALSE			読み込みを行わなかった。
	////////////////////////////////////////////////////////////////////////////
	static	BOOL WriteFormatString(CFile *file, LPCTSTR format, ...);

	////////////////////////////////////////////////////////////////////////////
	//	ファイルフラッシュ(MFC)
	//	入力：	CFile			*file;			ファイルクラスへのポインタ
	//	出力：	なし
	////////////////////////////////////////////////////////////////////////////
	static	void FlushFile(CFile *file);

	////////////////////////////////////////////////////////////////////////////
	//	ファイルオープン(バイナリ書き出しモード)(SDK)
	//	入力：	LPCTSTR		fname;			ファイル名称
	//	出力：	INVALID_HANDLE_VALUE以外	正常終了
	//			INVALID_HANDLE_VALUE		異常終了
	////////////////////////////////////////////////////////////////////////////
	static	HANDLE OpenBinaryRW(LPCTSTR fname);

	////////////////////////////////////////////////////////////////////////////
	//	ファイルシーク(SDK)
	//	入力：	HANDLE			hFile;			ファイルハンドル
	//			LONGLONG		bytes;			移動するバイト数
	//			DWORD			offset;			開始位置(CMN_FILE_SEEK_xxx)
	//	出力：	TRUE			正常終了
	//			FALSE			異常終了
	////////////////////////////////////////////////////////////////////////////
	static	BOOL Seek(HANDLE hFile, LONGLONG bytes, DWORD offset);

	////////////////////////////////////////////////////////////////////////////
	//	ファイルクローズ(SDK)
	//	入力：	HANDLE			hFile;			ファイルハンドル
	//	出力：	なし
	////////////////////////////////////////////////////////////////////////////
	static	void CloseFile(HANDLE hFile);

	////////////////////////////////////////////////////////////////////////////
	//	書式付き文字列書き込み(SDK)
	//	入力：	HANDLE			hFile;			ファイルハンドル
	//			LPCTSTR			format;			出力フォーマット
	//	出力：	TRUE			正常終了
	//			FALSE			読み込みを行わなかった。
	////////////////////////////////////////////////////////////////////////////
	static	BOOL WriteFormatString(HANDLE hFile, LPCTSTR format, ...);

	////////////////////////////////////////////////////////////////////////////
	//	ファイルフラッシュ(SDK)
	//	入力：	HANDLE			hFile;			ファイルハンドル
	//	出力：	TRUE			正常終了
	//			FALSE			異常終了
	////////////////////////////////////////////////////////////////////////////
	static	BOOL FlushFile(HANDLE hFile);

	/////////////////////////////////////////////////////////////////////////////
	//	ログ出力関数
	//	入力：	LPCTSTR			str;			出力する文字列
	//	出力：	なし
	/////////////////////////////////////////////////////////////////////////////
	static void LogWrite(LPCTSTR str,HANDLE m_hFile);

	/////////////////////////////////////////////////////////////////////////////
	//	パスの拡張子を変更
	//	入力：	CString			&fname;			ファイル名称
	//			LPCTSTR			extension;		変更後の拡張子
	//	出力：	TRUE			正常終了
	//			FALSE			異常終了
	/////////////////////////////////////////////////////////////////////////////
	static	BOOL RenameExtension(CString &fname, LPCTSTR extension);

	/////////////////////////////////////////////////////////////////////////////
	//	テンポラリディレクトリ取得
	//	入力：	CString			path;			テンポラリディレクトリ名の格納先
	//	出力：	TRUE			正常終了
	//			FALSE			異常終了
	/////////////////////////////////////////////////////////////////////////////
	static	BOOL GetTempPath(CString &path);

	/////////////////////////////////////////////////////////////////////////////
	//	ディレクトリクリア(※取扱注意)
	//	入力：	LPCTSTR			dirname;		クリアディレクトリ名称
	//	出力：	FALSE			異常終了
	//			TRUE			正常終了
	//	備考：	指定ディレクトリ以下のファイル、ディレクトリを全て削除するため、
	//			注意して使用すること！！
	/////////////////////////////////////////////////////////////////////////////
	static	BOOL ClearDirectory(LPCTSTR dirname);

	/////////////////////////////////////////////////////////////////////////////
	//	ディレクトリコピー(※取扱注意)
	//	入力：	CString			from;		コピー元フォルダPath
	//	入力：	CString			to  ;		コピー先フォルダPath
	//	出力：	FALSE			異常終了
	//			TRUE			正常終了
	//	備考：	
	//			
	/////////////////////////////////////////////////////////////////////////////
	static BOOL FolderCopy( CString from, CString to );

	////////////////////////////////////////////////////////////////////////////
	//	フォルダ選択ダイアログの表示
	//	入力：	CWnd		*parent;		親ウィンドウクラスへのポインタ
	//			CString		&dirname;		フォルダ名(フルパス)の格納先
	//			LPCTSTR		title;			タイトル文字列
	//			LPCTSTR		basedir;		デフォルトフォルダのパス名(省略可)
	//	出力：	FALSE		キャンセルされた。
	//			TRUE		正常終了
	////////////////////////////////////////////////////////////////////////////
	static	BOOL SelectFolder(CWnd *parent,  CString &dirname, LPCTSTR title, LPCTSTR basedir = NULL);

	////////////////////////////////////////////////////////////////////////////
	//	特殊フォルダのPATHを取得する
	//	出力：	デスクトップのPATH			成功
	//			_T("")						失敗
	////////////////////////////////////////////////////////////////////////////
	static CString GetSpecialFolderPath(int nID);
private:
	//	SHBrowseForFolder関数のコールバックルーチン
	static	INT	CALLBACK BrowseCallbackProc(HWND hWnd, UINT msg, LPARAM lparam, LPARAM ldata);

private:
	//	デフォルトフォルダ	SelectFolder関数用
	static	TCHAR	*m_DefaultFolder;
};